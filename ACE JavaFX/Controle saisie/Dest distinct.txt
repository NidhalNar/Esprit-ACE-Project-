<?php

namespace App\Entity;

use App\Repository\DestinationRepository;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Validator\Constraints\UniqueDestination;
use Symfony\Component\Validator\Context\ExecutionContextInterface;

#[ORM\Entity(repositoryClass: DestinationRepository::class)]
#[UniqueDestination]
class Destination
{
    #[ORM\Id]
    #[ORM\GeneratedValue]
    #[ORM\Column]
    private ?int $id = null;

    #[ORM\Column(length: 25)]
    #[Assert\NotBlank(message: "Please enter a country (pays).")]
    private ?string $pays = null;

    #[ORM\Column(length: 25)]
    #[Assert\NotBlank(message: "Please enter a city (ville).")]
    private ?string $ville = null;

    #[ORM\Column(nullable: true)]
    private ?int $id_weather = null;

    #[ORM\OneToMany(mappedBy: 'place', targetEntity: Hotel::class)]
    private Collection $hotels;

    public function __construct()
    {
        $this->hotels = new ArrayCollection();
    }

    public function getId(): ?int
    {
        return $this->id;
    }

    public function getPays(): ?string
    {
        return $this->pays;
    }

    public function setPays(string $pays): self
    {
        $this->pays = $pays;

        return $this;
    }

    public function getVille(): ?string
    {
        return $this->ville;
    }

    public function setVille(string $ville): self
    {
        $this->ville = $ville;

        return $this;
    }

    public function getIdWeather(): ?int
    {
        return $this->id_weather;
    }

    public function setIdWeather(?int $id_weather): self
    {
        $this->id_weather = $id_weather;

        return $this;
    }

    /**
     * @return Collection<int, Hotel>
     */
    public function getHotels(): Collection
    {
        return $this->hotels;
    }

    public function addHotel(Hotel $hotel): self
    {
        if (!$this->hotels->contains($hotel)) {
            $this->hotels->add($hotel);
            $hotel->setPlace($this);
        }

        return $this;
    }

    public function removeHotel(Hotel $hotel): self
    {
        if ($this->hotels->removeElement($hotel)) {
            // set the owning side to null (unless already changed)
            if ($hotel->getPlace() === $this) {
                $hotel->setPlace(null);
            }
        }

        return $this;
    }

    #[Assert\Callback]
    public function validateUniqueDestination(ExecutionContextInterface $context, $payload): void
    {
        // Check if destination already exists
        $existingDestination = $this->destinationRepository->findOneBy(['pays' => $this->pays, 'ville' => $this->ville]);
        if ($existingDestination && $existingDestination->getId() !== $this->id) {
            $context->buildViolation('The destination ({{ pays }}/{{ ville }}) already exists.')
                ->setParameter('{{ pays }}', $this->pays)
                ->setParameter('{{ ville }}', $this->ville)
                ->atPath('pays')
                ->addViolation();
        }
    }
}
